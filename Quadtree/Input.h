#pragma once
#include <SDL2/SDL.h>
#include <string>
#include <unordered_map>
#include <memory>

class Input
{
public:
	//------------------Enumerated----------------
	/// A type of input action.
	enum ActionType {
		/// The button/key was down and is now up.
		Pressed,
		/// Button released
		Released,
		/// The button/key was up in the previous update and is still up.
		StillUp,
		/// The button/key was down in this update (previous state is not considered).
		Down,
		/// The button/key was up in this update (previous state is not considered).
		Up,
		/// Button held
		Held
	};

	//-----------------Struct--------------------
	/// Represents a key action.
	struct InputAction
	{
		SDL_Scancode actionKey;

		SDL_JoyButtonEvent gamepadButton;

		InputAction(SDL_Scancode actionKey)
		{
			this->actionKey = actionKey;
		}
	};
	//------------------Constructors-------------
	Input();
	~Input();

	//-------------------Functions---------------
	/// Checks the SDL event structs for stuff
	void PollEvent();

	/// This should be called every frame
	void UpdateKeyboardState();

	// Clears the states, used for screen transistions
	void ClearKeyboardState();

	/// 
	bool ActionOccurred(std::string actionName, ActionType actionType);

	/**
	* Adds key and input action pair into map.
	*/
	void AddKeyToMap(std::string key, InputAction &inputAct);
	//-------------------Variables---------------

private:
	//-------------------Functions---------------

	/// Checks keyboard states to determine if a key was released
	/// @param key keyboard key id
	/// @return bool True if pressed, False if not
	bool KeyReleased(SDL_Scancode key);

	/// Checks keyboard states to determine if a key is being pressed
	/// @param key keyboard key id
	/// @return bool True if held, False if not
	bool KeyPressed(SDL_Scancode key);

	/// Checks keyboard states to determine if a key is being held
	/// @param key keyboard key id
	/// @return bool True if held, False if not
	bool KeyHeld(SDL_Scancode key);

	bool KeyStillUp(SDL_Scancode key);

	bool KeyUp(SDL_Scancode key);

	bool KeyDown(SDL_Scancode key);

	

	//-------------------Variables---------------
	//state of keyboard == relevant key presses and actions
	/// State of the keyboard in the previous frame
	Uint8 *_prevKeyboardState;

	/// State of the keyboard in the current frame
	Uint8 *_curKeyboardState;

	//These ones don't actually work or exist.  Create a struct
	//to handle gamepad states
	Uint8 *_prevGamepadState;
	Uint8 *_curGamepadState;

	/// Structure that holds all events generated by SDL
	SDL_Event _generalEvent;

	/// State of some key press
	SDL_KeyboardEvent _keyEvent;

	/// State of some gamepad button press
	SDL_JoyButtonEvent _gamepadButtonEvent;

	/// This names and stores relevant keystrokes
	std::unordered_map<std::string, std::shared_ptr<InputAction>> _actionMap;
};